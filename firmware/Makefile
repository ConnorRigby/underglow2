##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.11.2] date: [Thu Apr 27 17:26:01 MDT 2023] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = firmware


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

BTSTACK_ROOT = Lib/btstack
VPATH += ${BTSTACK_ROOT}/example

######################################
# source
######################################

# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/def.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/inet_chksum.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/init.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ip.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/mem.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/memp.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/netif.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/pbuf.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/tcp.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/tcp_in.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/tcp_out.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/timeouts.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/udp.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ipv4/acd.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ipv4/dhcp.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ipv4/etharp.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ipv4/icmp.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ipv4/ip4.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ipv4/ip4_addr.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ipv4/ip4_frag.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/netif/ethernet.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/apps/http/altcp_proxyconnect.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/apps/http/fs.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/core/src/apps/http/httpd.c \
# ${BTSTACK_ROOT}/3rd-party/lwip/dhcp-server/dhserver.c \
# ${BTSTACK_ROOT}/platform/lwip/port/sys_arch.c \
# ${BTSTACK_ROOT}/platform/lwip/bnep_lwip.c \
# ${BTSTACK_ROOT}/platform/embedded/btstack_audio_embedded.c \

BTSTACK_SOURCES = 
# ${BTSTACK_ROOT}/3rd-party/micro-ecc/uECC.c \
# ${BTSTACK_ROOT}/3rd-party/yxml/yxml.c \
# ${BTSTACK_ROOT}/3rd-party/md5/md5.c \
# ${BTSTACK_ROOT}/chipset/da145xx/btstack_chipset_da145xx.c \
# ${BTSTACK_ROOT}/platform/embedded/btstack_run_loop_embedded.c \
# ${BTSTACK_ROOT}/platform/embedded/btstack_stdin_embedded.c \
# ${BTSTACK_ROOT}/platform/embedded/btstack_tlv_flash_bank.c \
# ${BTSTACK_ROOT}/platform/embedded/btstack_uart_block_embedded.c \
# ${BTSTACK_ROOT}/platform/embedded/hci_dump_embedded_stdout.c \
# ${BTSTACK_ROOT}/platform/embedded/hci_dump_segger_rtt_stdout.c \
# ${BTSTACK_ROOT}/src/ad_parser.c \
# ${BTSTACK_ROOT}/src/ble/att_db.c \
# ${BTSTACK_ROOT}/src/ble/att_dispatch.c \
# ${BTSTACK_ROOT}/src/ble/att_server.c \
# ${BTSTACK_ROOT}/src/ble/gatt-service/ancs_client.c \
# ${BTSTACK_ROOT}/src/ble/gatt-service/battery_service_client.c \
# ${BTSTACK_ROOT}/src/ble/gatt-service/battery_service_server.c \
# ${BTSTACK_ROOT}/src/ble/gatt-service/device_information_service_client.c \
# ${BTSTACK_ROOT}/src/ble/gatt-service/device_information_service_server.c \
# ${BTSTACK_ROOT}/src/ble/gatt-service/hids_device.c \
# ${BTSTACK_ROOT}/src/ble/gatt_client.c \
# ${BTSTACK_ROOT}/src/ble/le_device_db_memory.c \
# ${BTSTACK_ROOT}/src/ble/le_device_db_tlv.c \
# ${BTSTACK_ROOT}/src/ble/sm.c \
# ${BTSTACK_ROOT}/src/btstack_audio.c \
# ${BTSTACK_ROOT}/src/btstack_crypto.c \
# ${BTSTACK_ROOT}/src/btstack_hid_parser.c \
# ${BTSTACK_ROOT}/src/btstack_linked_list.c \
# ${BTSTACK_ROOT}/src/btstack_memory.c \
# ${BTSTACK_ROOT}/src/btstack_memory_pool.c \
# ${BTSTACK_ROOT}/src/btstack_resample.c \
# ${BTSTACK_ROOT}/src/btstack_ring_buffer.c \
# ${BTSTACK_ROOT}/src/btstack_run_loop.c \
# ${BTSTACK_ROOT}/src/btstack_tlv.c \
# ${BTSTACK_ROOT}/src/btstack_tlv_none.c \
# ${BTSTACK_ROOT}/src/btstack_util.c \
# ${BTSTACK_ROOT}/src/hci.c \
# ${BTSTACK_ROOT}/src/hci_cmd.c \
# ${BTSTACK_ROOT}/src/hci_dump.c \
# ${BTSTACK_ROOT}/src/hci_transport_h4.c \
# ${BTSTACK_ROOT}/src/l2cap.c \
# ${BTSTACK_ROOT}/src/l2cap_signaling.c \
# ${BTSTACK_ROOT}/example/sm_pairing_central.c \
# Core/Src/btstack/port.c

GATT_FILES = \
	sm_pairing_peripheral.gatt \
	sm_pairing_central.gatt \

# C sources
C_SOURCES =  \
${BTSTACK_SOURCES} \
Core/Src/main.c \
Core/Src/stm32g4xx_it.c \
Core/Src/stm32g4xx_hal_msp.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_fdcan.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_rcc.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_rcc_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_flash.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_flash_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_flash_ramfunc.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_gpio.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_exti.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_dma.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_dma_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_pwr.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_pwr_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_cortex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_uart.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_uart_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_spi.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_spi_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_tim.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_tim_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_pcd.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_pcd_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_ll_usb.c \
Core/Src/system_stm32g4xx.c

# ASM sources
ASM_SOURCES =  \
startup_stm32g431xx.s

# Zig source
ZIG_SOURCES = \
Core/Src/entry.zig


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
ZIG = zig
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32G431xx


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-ICore/Inc \
-IDrivers/STM32G4xx_HAL_Driver/Inc \
-IDrivers/STM32G4xx_HAL_Driver/Inc/Legacy \
-IDrivers/CMSIS/Device/ST/STM32G4xx/Include \
-IDrivers/CMSIS/Include  \
-IDrivers/CMSIS/Include

# C_INCLUDES += -I${BTSTACK_ROOT}/src/ble
# C_INCLUDES += -I${BTSTACK_ROOT}/src/ble/gatt-service
# C_INCLUDES += -I${BTSTACK_ROOT}/src/classic
# C_INCLUDES += -I${BTSTACK_ROOT}/src
# C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/micro-ecc
# C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/bluedroid/decoder/include
# C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/bluedroid/encoder/include
# C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/hxcmod-player
# C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/hxcmod-player/mods
# C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/lwip/core/src/include
# C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/lwip/dhcp-server
# C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/md5
# C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/yxml
# C_INCLUDES += -I${BTSTACK_ROOT}/platform/embedded
# C_INCLUDES += -I${BTSTACK_ROOT}/platform/lwip
# C_INCLUDES += -I${BTSTACK_ROOT}/platform/lwip/port
# C_INCLUDES += -I${BTSTACK_ROOT}/chipset/da145xx
# C_INCLUDES += -ICore/Src/btstack 
C_INCLUDES += -I$(BUILD_DIR)

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

ZIG_RELEASE := -O ReleaseSmall
ZIGFLAGS = -target arm-freestanding-gnueabihf -mcpu=cortex_m4 $(ZIG_RELEASE) $(C_DEFS) $(C_INCLUDES)


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32G431CBUx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin

# SBC codec
# include ${BTSTACK_ROOT}/3rd-party/bluedroid/decoder/Makefile.inc
# include ${BTSTACK_ROOT}/3rd-party/bluedroid/encoder/Makefile.inc
# include ${BTSTACK_ROOT}/chipset/da145xx/Makefile.inc

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(GATT_FILES:.gatt=.h))
vpath %.gatt $(sort $(dir $(GATT_FILES)))

OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))

# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))
# list of Zig program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ZIG_SOURCES:.zig=.o)))
vpath %.zig $(sort $(dir $(ZIG_SOURCES)))

$(BUILD_DIR)/%.h: %.gatt | $(BUILD_DIR)
	python3 ${BTSTACK_ROOT}/tool/compile_gatt.py $< $@ 

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/%.o: %.zig Makefile | $(BUILD_DIR)
	$(ZIG) build-obj $(ZIGFLAGS) $< -femit-bin=$@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
